#!/usr/bin/env bash
#
# Dotfiles setup script
# Author: Conor Martin

# Secure the script, this breaks $* but you should probably be using $@ anyway
IFS='
  '

# Set PATH to sane defaults
PATH=/usr/local/bin:/usr/bin:/bin
export PATH

# Global variables
EXITCODE=0
PROG_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOTFILES="bash_profile bashrc dircolors gvimrc vimrc inputrc"

append_once() {
  # Usage: append_once "string" "file"
  # Appends a string to a file if string does not already exist
  string=$1
  file=$2
  if ! [ -f "$file" ]; then
    echo "$string" | sudo tee "$file"
  elif [[ $(grep -c "$string" < "$file") -eq 0 ]]; then
    echo "$string" | sudo tee -a "$file"
  fi
}
check(){
  # Usage: check $? "Task description"
  if [[ $1 -eq 0 ]]; then
    okay "$2 complete"
  else
    fail "$2 failed"
  fi
}
fail(){
  printf "\\n[ "; tput setaf 1; printf "FAIL"; tput sgr0; printf " ] %s\\n\\n" "$1"
  exit 1
}
info(){
  printf "\\n[ "; tput setaf 6; printf "INFO"; tput sgr0; printf " ] %s\\n\\n" "$1"
}
okay(){
  printf "\\n[ "; tput setaf 2; printf " OK "; tput sgr0; printf " ] %s\\n\\n" "$1"
}
warn(){
  printf "\\n[ "; tput setaf 3; printf "WARN"; tput sgr0; printf " ] %s\\n\\n" "$1"
  EXITCODE=$((EXITCODE + 1))
}
setup_git() {
  # Skip if running as root
  if [[ $EUID -ne 0 ]]; then
    info "Git configuration"
    if [[ "$interactive" -eq 0 ]];then
      read -rp "Enter Git name: " gitName
      if [[ ! -z "$gitName" ]]; then
        git config --global user.name "$gitName"
        read -rp "Enter Git email: " gitEmail
        if [[ ! -z "$gitEmail" ]]; then
          git config --global user.email "$gitEmail"
          if [[ ! -f ~/.ssh/id_rsa ]]; then
            ssh-keygen -t rsa -C "$gitEmail" -f ~/.ssh/id_rsa | indent
          fi
        fi
      fi
    fi &&
    git config --global color.ui auto &&
    git config --global core.editor "$(which vim)" &&
    git config --global core.autocrlf input &&
    git config --global push.default current &&
    git config --global alias.unstage 'reset HEAD --' &&
    git config --global alias.last 'log -1 HEAD' &&
    git config --global alias.co checkout &&
    git config --global alias.br branch &&
    git config --global alias.ci commit &&
    git config --global alias.s status &&
    git config --global alias.logp 'log --pretty=oneline --graph'
    check $? "Git configuration"
  fi
}
setup_linux() {
  info "Linking dotfiles"
  for item in ${DOTFILES}; do
    if [[ "${PROG_DIR}/${item}" -ef "${HOME}/.${item}" ]]; then
      echo "Skipping ${item}"
    else
      echo "Linking ${item}"
      [[ -f "${HOME}/.${item}" ]] && rm "${HOME}/.${item}"
      ln -s "${PROG_DIR}/${item}" "${HOME}/.${item}"
    fi
  done
  check $? "Dotfile linking"

  info "Installing base16-shell"
  if [[ -d "${HOME}/.config/base16-shell" ]]; then
    warn "base16-shell directory already exists, skipping"
  else
    git clone -q https://github.com/chriskempson/base16-shell.git ~/.config/base16-shell
    check $? "base16-shell installation"
  fi
  
  info "Installing base16-vim"
  if [[ -d ~/.vim/bundle/base16-vim ]]; then
    warn "base16-vim directory already exists, skipping"
  else
    git clone -q https://github.com/chriskempson/base16-vim.git ~/.vim/bundle/base16-vim
    check $? "base16-vim installation"
  fi
  
  info "Installing Vundle"
  if [[ -d ~/.vim/bundle/Vundle.vim ]]; then
    warn "Vundle bundle already exists, skipping"
  else
    git clone -q https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
    check $? "Vundle installation"
  fi

  info "Installing Vim plugins"
  vim -E -s -c "source ~/.vimrc" -c PluginInstall -c qa
  check $? "Vim plugin installation"
}
setup_macos() {
  # Skip MacOS configuration if root
  if [[ ! "$(id -u)" -eq 0 ]]; then
    sudo -v
    info "Setting Hostname"
    read -rp "Enter Hostname: " name
    if [ ! -z "$name" ]; then
      sudo scutil --set ComputerName "$name" &&
      sudo scutil --set HostName "$name" &&
      sudo scutil --set LocalHostName "$name" &&
      sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "$name"
      check $? "Hostname setup"
    else
      warn "Hostname unchanged"
    fi
    
    info "Installing Homebrew"
    if ! (which brew > /dev/null 2>&1); then
      ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    else
      brew update &&
      brew upgrade
    fi
    check $? "Homebrew installation"
  fi
}

# Check if running from an interactive shell
if [[ -t 0 ]]; then
  interactive=0
else
  interactive=1
fi

if [[ "$( uname -s )" = "Darwin" ]] > /dev/null 2>&1; then
  setup_macos
  setup_linux
  setup_git
else
  setup_linux
  setup_git
fi

exit 0