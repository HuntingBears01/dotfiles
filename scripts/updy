#! /usr/bin/env bash

# Update script
# Author: Ciara Martin

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#   Define variables
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Text formatting
green=$(tput setaf 2)
grey=$(tput setaf 7)
italic=$(tput sitm)
red=$(tput setaf 1)
reset=$(tput sgr0)
yellow=$(tput setaf 3)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#   Define functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

check() {
  # Purpose:  Display task status, log result & exit on error
  # Usage:    check $? "Task name"
  if [ "$1" -eq 0 ]; then
    echo
    echo "${green}${italic}==> ${grey}$2 successful${reset}"
    echo
  else
    echo
    echo "${red}${italic}==> ${grey}$2 failed${reset}"
    echo
    exit 1
  fi
}

info() {
  # Purpose:  Displays an info message & outputs to logfile
  # Usage:    info "Message"
  echo
  echo "${yellow}${italic}==> ${grey}$1${reset}"
  echo
}

pushd () {
  # Purpose:  Hide output from pushd when successful
  # Usage:    pushd /path/to/dir
  # shellcheck disable=SC2164
  command pushd "$@" > /dev/null
}

popd () {
  # Purpose:  Hide output from popd when successful
  # Usage:    popd
  # shellcheck disable=SC2164
  command popd > /dev/null
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#   Update dotfiles
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -d "${HOME}"/.config/dotfiles ]; then
  pushd "${HOME}"/.config/dotfiles || exit
  if [[ "$(git fetch --dry-run)" == "" ]] > /dev/null 2>&1; then
    info "dotfiles up to date"
  else
    if  [[ "$(git stash push)" != "No local changes to save" ]] > /dev/null 2>&1; then
      info "Local changes stashed"
      stashed=true
    fi
    info "Updating dotfiles"
    git pull && ./setup.sh
    check $? "dotfiles update"
    if [ "${stashed}" = true ]; then
      info "Restoring local changes"
      git stash pop
    fi
  fi
  popd || exit
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#   Update fzf (git version)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -d "${HOME}"/.local/bin/fzf ]; then
  pushd "${HOME}"/.local/bin/fzf || exit
  if [[ "$(git fetch --dry-run)" == "" ]] > /dev/null 2>&1; then
    info "fzf is up to date"
  else
    if  [[ "$(git stash push)" != "No local changes to save" ]] > /dev/null 2>&1; then
      info "Local changes stashed"
      stashed=true
    fi
    info "Updating fzf"
    git pull && ./install --bin
    check $? "fzf update"
    if [ "${stashed}" = true ]; then
      info "Restoring local changes"
      git stash pop
    fi
  fi
  popd || exit
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#   Update powerlevel10k
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -d "${HOME}"/.config/powerlevel10k ]; then
  pushd "${HOME}"/.config/powerlevel10k || exit
  if [[ "$(git fetch --dry-run)" == "" ]] > /dev/null 2>&1; then
    info "powerlevel10k is up to date"
  else
    if  [[ "$(git stash push)" != "No local changes to save" ]] > /dev/null 2>&1; then
      info "Local changes stashed"
      stashed=true
    fi
    info "Updating powerlevel10k"
    git pull && ./install --bin
    check $? "powerlevel10k update"
    if [ "${stashed}" = true ]; then
      info "Restoring local changes"
      git stash pop
    fi
  fi
  popd || exit
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#   Update Mac using brew
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if  [[ "$( uname -s )" = "Darwin" ]] > /dev/null 2>&1; then
  info "Updating brew"
  brew update
  check $? "Brew update"

  if [[ -z "$(brew outdated --formula --quiet)" ]] > /dev/null 2>&1; then
    info "Brew apps up to date"
  else
    info "Upgrading brew apps"
    brew upgrade --formula
    check $? "Brew upgrade"
  fi

  if [[ -z "$(brew outdated --cask --quiet)" ]] > /dev/null 2>&1; then
    info "Brew cask apps up to date"
  else
    info "Upgrading brew cask apps"
    brew upgrade --cask
    check $? "Brew cask upgrade"
  fi
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#   Update Linux using default package manager
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -f /etc/os-release ]; then
  source /etc/os-release
  os="${ID}"
  os_family="${ID_LIKE}"
  case "${os}" in
    debian | ubuntu | raspbian | pop )
      info "Updating apt cache"
      sudo apt update
      check $? "apt update"

      info "Upgrading apt apps"
      sudo apt upgrade
      check $? "apt upgrade"

      info "Autoremove apt apps"
      sudo apt autoremove
      check $? "apt autoremove"
      ;;
  esac

  case "${os_family}" in
    *debian* | *ubuntu* )
      info "Updating apt cache"
      sudo apt update
      check $? "apt update"

      info "Upgrading apt apps"
      sudo apt upgrade
      check $? "apt upgrade"

      info "Autoremove apt apps"
      sudo apt autoremove
      check $? "apt autoremove"
      ;;
    *arch* )
      info "Updating pacman apps"
      sudo pacman -Syu
      check $? "pacman update"
      ;;
    *rhel* | *fedora* )
      if (command -v dnf > /dev/null 2>&1); then
        info "Updating dnf apps"
        sudo dnf update
        check $? "dnf update"
      else
        info "Updating yum apps"
        sudo yum update
        check $? "yum update"
      fi
      ;;
    *opensuse* | *suse* )
      info "Refreshing zypper cache"
      sudo zypper refresh
      check $? "zypper refresh"

      info "Updating zypper apps"
      sudo zypper update
      check $? "zypper update"
      ;;
  esac
fi
